# 메모이제이션을 이용하는 경우 피보나치 수열 함수의 시간복잡도는 O(N)이다.

# 다이나믹 프로그래밍 vs 분할 정복
# 다이나믹 프로그래밍과 분할 정복은 모두 최적 부분 구조를 가질 때 사용할 수 있다.
# 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아 큰 문제를 해결할 수 있는 상황
# 다이나믹 프로그래밍과 분할 정복의 차이점은 부분 문제의 중복이다.
# 다이나믹 프로그래밍 문제에서 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복된다.
# 분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않는다.

# 분할 정복의 예시 퀵 정렬을 살펴보면
# 한번 원소(Pivot)가 자리를 변경해서 자리를 잡으면 그 기준원소의 위치는 바뀌지 않는다.
# 분할 이후 해당 피봇을 다시 처리하는 부분 문제는 호출하지 않는다.

# 다이나믹 프로그래밍 문제에 접근하는 방법
# 주어진 문제가 다이나믹 프로그래밍 유형이라고 파악하는 것이 가장 중요하다.
# 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 해결할 수 있는지 검토한다.
# 다른 알고리즘 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려한다.
# 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서 구한 단이
# 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용할 수 있다.
# 일반적인 코딩 테스트 수준에서 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많다.

# Dynamic Programming no.1
# 개미 전사 문제

# 개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량창고를 몰래 공격하려고 한다.
# 메뚜기 마을에는 여러 개의 식량창고가 있는데, 식량창고는 일직선으로 이어져 있다.
# 각 식량창고에는 정해진 수의 식량을 저장하고 있으며 개미전사는 식량창고를 선택적으로 약탈하여 식량을 빼앗을 예정이다.
# 이때 메뚜기 정찰병들은 일직선상에 존재하는 식량창고 중에서 서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있다.
# 따라서 개미 전사가 정찰병에게 들키지 않고 식량창고를 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량창고를 약탈해야 한다.
# 예를 들어 식량창고 4개가 다음과 같이 존재한다고 가정한다.
# 1, 3, 1, 5
# 이때 개미 전사는 두 번째 식량창고와 네 번째 식량창고를 선택했을 때 최댓값인 총 8개의 식량을 빼앗을 수 있다.
# 개미전사는 식량창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기 원한다.
# 개미전사를 위해 식량창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하라

# 문제해결 아이디어
# N = 4 일때, 다음과 같은 경우들이 존재할 수 있다.
# 식량을 선택할 수 있는 경우의 수는 다음과 같이 8가지 이다.
# 최적의 해는 8이다.

# Ai = i 번째 식량창고까지의 최적의 해(얻을 수 있는 식량의 최댓값)
# 이렇게 정의한다면 다이나믹 프로그래밍을 적용할 수 있다.
# 창고 : 1 3 1 5
# Dp 값 : 1 3 3 8 - 최적의 해 계산 값
# 왼쪽부터 차례대로 식량창고를 턴다고 했을 때, 특정한 i번째 식량창고에 대해 공격할지 안할지 여부를 결정하면
# 아래 2가지 경우중 더 많은 식량을 털 수 있는 경우를 선택하면 된다.
# i - 1를 턴다면 현재 식량창고는 털 수 없음
# i - 2를 턴다면 현재 식량창고는 털 수 있음

# Ai = i번째 식량창고까지의 최적의 해(얻을 수 있는 식량의 최댓값)
# ki = i번째 식량창고에 있는 식량의 양
# 점화식
# Ai = max(Ai-1, Ai-2 + kㅑi
# 한 칸 이상 떨어진 식량창고는 항상 털 수 있으므로 i - 3번째 이하는 고려할 필요가 없다.


import sys
# 정수 N 입력
n = int(sys.stdin.readline().rstrip())

# 모든 식량 정보 입력받기
foods = list(map(int, sys.stdin.readline().split()))

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 다이나믹 프로그래밍 진행(바텀업)
d[0] = foods[0]
d[1] = max(foods[0], foods[1])

for i in range(2, n):
    d[i] = max(d[i - 1], d[i - 2] + foods[i])

# 계산된 결과 출력
print(d[n - 1])
