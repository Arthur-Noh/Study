# Dynamic Programming no.2
# 1로 만들기 문제

# 정수 X가 주어졌을때,  정수 X 에 사용할 수 있는 연산은 다음과 같이 4가지이다.
# 1. X가 5로 나누어 떨어지면, 5로 나눈다.
# 2. X가 3으로 나누어 떨어지면, 3으로 나눈다.
# 3. X가 2로 나누어 떨어지면, 2로 나눈다.
# 4. X에서 1을 뺀다.

# 정수 X가 주어졌을 때, 연산 4개를 적절히 사용해서 값을 1로 만들고자 한다.
# 연산을 사용하는 횟수의 최솟값을 출력하라.
# 예를 들어 정수가 26이면
# 26 - 25 - 5 - 1
# 3번 연산이 최솟값이다.

# 단순히 나누기를 먼저 수행해서 작은 값으로 만드는 것이 최선의 방법은 아니다(그리디 알고리즘)

# 문제해결 아이디어
# ai = i를 1로 만들기 위한 최소 연산 횟수
# 점화식은 다음과 같다.
# ai = min(ai-1, ai/2, ai/3, ai/5) + 1
# 단, 1을 빼는 연산을 제외하고는 해당 수로 나누어 떨어질 대에 한해 점화식을 적용할 수 있다.

import sys
# 정수 X 입력
x = int(sys.stdin.readline().rstrip())

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 30001

# 바텀업 진행
for i in range(2, x + 1):
    # 현재의 수에서 1을 빼는 경우
    d[i] = d[i - 1] + 1

    # 현재의 수가 2로 나누어 떨어지는 경우
    if i % 2 == 0:
        d[i] = min(d[i], d[i//2] + 1)

    # 현재의 수가 3으로 나누어 떨어지는 경우
    if i % 3 == 0:
        d[i] = min(d[i], d[i//3] + 1)

    # 현재의 수가 5로 나누어 떨어지는 경우
    if i % 5 == 0:
        d[i] = min(d[i], d[i//5] + 1)

print(d[x])
